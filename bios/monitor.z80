BUFFER		= 0x2020  ; ends in 0x209f (128 bytes)
ADDR_START      = 0x20a0
ADDR_END        = 0x20a2
DATA            = 0x20a4  ; ends in 0x20ce (43 bytes)
DATA_SZ         = 0x20cf

BACKSPACE	= 8
DEL		= 127
CR              = 10
ENTER		= 13

INVALID_HEX	= 0xff

	;-------------------
	; LINE INPUT
	;-------------------

monitor:
	; TODO - print welcome message

start:
	ld	hl, BUFFER		; HL = pointer to buffer

	ld      a, '*'			; print prompt
	rst	SYS_PRINT
	ld      a, ' '
	rst	SYS_PRINT

	;
	; get the next char from UART
	;   HL = buffer (IN)
	;

nextchr:
	in	a, (UART_CONFIG)	; key pressed?
	and	UART_INPUT_MSK
	jr	z, nextchr

	in	a, (UART)		; get key pressed

	cp	BACKSPACE		; is BACKSPACE?
	jr	z, backspace
	cp	DEL
	jr	z, backspace

	ld	b, a			; check if the line has less than 127 characters
	ld	a, l
	cp	128
	jr	c, .has_space
	jr	nextchr
.has_space:
	ld	a, b

	rst	SYS_PRINT		; print key pressed
	ld	(hl), a			; add to buffer
	inc	hl
	
	cp	ENTER  			; is ENTER?
	jr	z, enter

	jr	nextchr			; otherwise, continue

	;
	; deal with BACKSPACE
	;

backspace:
	ld	a, l			; check if first char, return
	cp	BUFFER & 0xff
	jr	z, nextchr

	ld	a, BACKSPACE		; erase last char
	rst	SYS_PRINT
	ld	a, ' '
	rst	SYS_PRINT
	ld	a, BACKSPACE
	rst	SYS_PRINT
	dec	hl			; decrement buffer
	jr	nextchr


	; 
	; deal with ENTER (start processing)
	;

enter:
	ld	a, CR			; print CR
	rst	SYS_PRINT

	; convert buffer to uppercase

	ld	hl, BUFFER		; go through all the buffer
.next:
	ld	a, (hl)
	
	cp	a, ENTER		; if ENTER, bail out
	jr	z, .done
	
	cp	'a'			; if < 'a', skip it
	jr	c, .skip

	sub	32			; convert to uppercase (ex. 'a' - 32 = 'A')
	ld	(hl), a

.skip:
	inc	hl			; increase pointer and do for the next char
	jr	.next
.done:

	;-------------------
	; INPUT PROCESSING
	;-------------------

process_input:

	;
	; process first value, and place it in ADDR_START
	;

	ld	de, BUFFER		; DE = buffer pointer

	call	skip_spaces

	cp	':'			; if the line starts with ':', is a continuation of the last address
	jp	z, continue_write

	call	process_hex_str		; process the next hex value (response in HL)
	ld	(ADDR_START), hl	; if it's just a single value, set it as start and end
	inc	hl
	ld	(ADDR_END), hl

	call	skip_spaces
	inc	de

	cp	ENTER			; if next key is ENTER, print RAM contents
	jp	z, print_ram

	cp	'.'			; if next key is '.', get end address
	jr	z, process_addr_end

	cp	'R'			; if next key is 'R', then jump to address
	jp	z, run

	cp	'I'			; if next key is 'I', then perform I/O input
	jp	z, io_input

	cp	':'
	jr	z, process_data_stream

	jp	syntax_error		; otherwise, syntax error

	;
	; process second address (in read mode), and set it to ADDR_END
	;   DE = current buffer pointer (IN)
	;

process_addr_end:
	
	call	process_hex_str		; process ending address
	inc	hl
	ld	(ADDR_END), hl

	call	skip_spaces		

	cp	ENTER			; if next key is ENTER, print RAM contents
	jp	z, print_ram

	jp	syntax_error		; otherwise, syntax error

	; 
	; continue writing to RAM
	;

continue_write:

	inc	de
	ld	hl, (ADDR_END)
	inc	hl
	ld	hl, (ADDR_START)
	jr	process_data_stream

	;
	; process subsequent values (in mode Write), and place them in DATA stream
	;   DE = current buffer pointer (IN)
	;

process_data_stream:

	ld	bc, DATA		; BC - pointer to data destination
	ld	a, 0			; set data size
	ld	(DATA_SZ), a

	call	skip_spaces

.next:
	call	process_hex_str		; process the string

	ld	a, l			; put the byte on the DATA array
	ld	(bc), a

	ld	a, (DATA_SZ)		; increment size counter
	inc	a
	ld	(DATA_SZ), a

	ld	a, (de)			; get next char

	inc	bc			; increment pointers
	inc	de

	call	skip_spaces

	cp	'I'			; if I or O, write to output
	jp	z, io_write
	cp	'O'
	jp	z, io_write

	cp	ENTER			; if ENTER, finalize and write to RAM
	jp	z, write_to_ram

	jr	.next

	; 
	; process hex string
	;   IN/OUT: DE (current buffer ptr)
	;   OUT:    HL (computed hex value), can be INVALID_HEX
	;

process_hex_str:

	ld	hl, 0			; HL = current value
	ld	a, 0

.next_char:
	add	hl, hl			; HL <<= 4
	add	hl, hl
	add	hl, hl
	add	hl, hl
	or	l			; HL |= A
	ld	l, a

	ld	a, (de)			; A = current character

	call	hex_to_dec		; convert from hex to dec
					; A = converted character

	cp	INVALID_HEX		; character is not valid - finalize processing
	ret	z

	inc	de

	jr	.next_char


	;
	; subroutine - convert hex char (in A) to number (in A)
	;

hex_to_dec:
	cp	'0'			; check if its a number
	jr	c, .not_a_number
	cp	'9' + 1
	jr	nc, .not_a_number

	sub	'0'			; return converted value
	ret
	
.not_a_number:
	cp	'A'			; check if its a letter
	jr	c, .not_a_letter
	cp	'F' + 1
	jr	nc, .not_a_letter
	
	sub	'A' - 0xA		; return converted value
	ret

.not_a_letter
	ld	a, INVALID_HEX
	ret


	;
	; subroutine - skip spaces in buffer
	;

skip_spaces:
	ld	a, (de)
	cp	a, ' '
	ret	nz
	inc	de
	jr	skip_spaces



	;-------------------
	; EXECUTE REQUEST
	;-------------------

	;
	; print RAM data (ADDR_START~ADDR_END)
	;

print_ram:
	ld	hl, (ADDR_START)

.address:
	ld	b, 4			; print address
	call	print_hex
	ld	a, ':'
	rst	SYS_PRINT
	ld	a, ' '
	rst	SYS_PRINT

.next:
	ld	a, (ADDR_END)		; is HL == ADDR_END?...
	cp	l
	jp	nz, .continue
	ld	a, (ADDR_END+1)
	cp	h
	jp	nz, .continue

	call	print_enter		; ... then we reached the end
	jp	start

.continue:
	push	hl
	ld	l, (hl)			; print data in address
	ld	b, 2
	call	print_hex
	pop	hl
	ld	a, ' '
	rst	SYS_PRINT

	inc	hl			; increment pointer

	; if address ends with 0x0 or 0x8, print ENTER and then the address
	ld	a, l
	and	0xf
	jr	z, .newline_and_addr
	cp	0x8
	jr	z, .newline_and_addr

	jr	.next			; otherwise, print the next data

.newline_and_addr:
	call	print_enter
	jp	.address

	; 
	; write to RAM
	;

write_to_ram:
	ld	a, (DATA_SZ)		; B - size (loop counter)
	ld	b, a	
	ld	hl, (ADDR_START)	; HL - destination addr
	ld	de, DATA		; DE - data origin

.next:
	ld	a, (de)			; write to memory
	ld	(hl), a
	inc	hl
	inc	de
	djnz	.next

	jp	start

	; 
	; perform I/O input
	;

io_input:
	ld	b, 2			; 2 bytes

	ld	a, (ADDR_START)		; print address
	ld	l, a
	call	print_hex
	ld	a, ':'
	rst	SYS_PRINT
	ld	a, ' '
	rst	SYS_PRINT

	ld	a, (ADDR_START)		; perform IO input
	ld	c, a
	in	a, (c)
	
	ld	h, 0			; print hex
	ld	l, a
	call	print_hex
	call	print_enter

	jp	start

	; 
	; perform I/O output
	;

io_write:
	ld	a, (ADDR_START)		; output [ADDR_START] = [DATA]
	ld	c, a
	ld	a, (DATA)
	out	(c), a

	jp start

	;
	; run -  jump to address
	;

run:
	ld	hl, ADDR_START
	jp	(hl)

	;
	; print hex value (HL) with (B) digits (2 or 4)
	;

print_hex:
	ld	a, b			; if only 2 digits, skip
	cp	2
	jr	z, .only_2_digits

	ld	a, h			; get lower byte
	ld	c, a			; save A
	repeat 4			; rotate to lower nibble
	rra	
	endrepeat
	call	print_nibble		; print lower nibble

	ld	a, c			; restore A
	call	print_nibble		; print lower nibble

.only_2_digits:
	ld	a, l			; get upper byte
	ld	c, a			; save A
	repeat 4			; rotate to upper nibble
	rra	
	endrepeat
	call	print_nibble		; print upper nibble

	ld	a, c			; restore A
	call	print_nibble		; print lower nibble

	ret

	;
	; print hex value of nibble in A
	;

print_nibble:
	and	0xf

	cp	0xa			; swap nibble for character
	jr	c, .is_number
	add	7
.is_number:
	add	'0'

	rst	SYS_PRINT		; print character

	ret


	;
	; subroutine - print ENTER
	;

print_enter:
	ld	a, CR
	rst	SYS_PRINT
	ld	a, ENTER
	rst	SYS_PRINT
	ret

	;
	; show error message
	;

syntax_error:
	ld	a, '/'
	rst	SYS_PRINT
	call	print_enter
	jp	start
	

; vim:ts=8:sw=8:sts=8:noexpandtab
